// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using groupbot.Models;

namespace groupbot.Migrations
{
    [DbContext(typeof(GroupContext))]
    [Migration("20180622181726_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("groupbot.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActiveGroupId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("FName");

                    b.Property<string>("SName");

                    b.Property<int>("VkId");

                    b.HasKey("Id");

                    b.HasIndex("ActiveGroupId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("groupbot.Models.DelayedRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int?>("GroupId");

                    b.Property<bool>("IsResended");

                    b.Property<string>("Request");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("DelayedRequests");
                });

            modelBuilder.Entity("groupbot.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<bool>("IsWt");

                    b.Property<int>("Limit");

                    b.Property<int>("MinPostCount");

                    b.Property<string>("Name");

                    b.Property<bool>("Notify");

                    b.Property<int>("Offset");

                    b.Property<int>("PostTime");

                    b.Property<bool>("PostponeEnabled");

                    b.Property<int>("PostsCounter");

                    b.Property<string>("PseudoName");

                    b.Property<string>("Text");

                    b.Property<int>("VkId");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("groupbot.Models.GroupAdmins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdminId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("Notify");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupAdmins");
                });

            modelBuilder.Entity("groupbot.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PictureName");

                    b.Property<int?>("PostId");

                    b.Property<string>("SPictureAddress");

                    b.Property<DateTime>("UploadTime");

                    b.Property<string>("XPictureAddress");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("groupbot.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("GroupId");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("groupbot.Models.Admin", b =>
                {
                    b.HasOne("groupbot.Models.Group", "ActiveGroup")
                        .WithMany()
                        .HasForeignKey("ActiveGroupId");
                });

            modelBuilder.Entity("groupbot.Models.DelayedRequest", b =>
                {
                    b.HasOne("groupbot.Models.Group", "Group")
                        .WithMany("DelayedRequests")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("groupbot.Models.GroupAdmins", b =>
                {
                    b.HasOne("groupbot.Models.Admin", "Admin")
                        .WithMany("GroupAdmins")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("groupbot.Models.Group", "Group")
                        .WithMany("GroupAdmins")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("groupbot.Models.Photo", b =>
                {
                    b.HasOne("groupbot.Models.Post", "Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("groupbot.Models.Post", b =>
                {
                    b.HasOne("groupbot.Models.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
